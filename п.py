import telebot
import random
import json
from telebot import types
from main import token

bot = telebot.TeleBot(token)

def load_json(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        content = json.load(file)
    return content['questions'], content['answers_to_character'], content['results']

questions, answers_to_character, results = load_json('questions.json')

def load_user_data():
    try:
        with open('user_data.json', 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError, OSError):
        return {}

def save_user_data():
    with open('user_data.json', 'w', encoding='utf-8') as file:
        json.dump(users_data, file, ensure_ascii=False, indent=4)

users_data = {}

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n""/start - –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n""/help - —Å–ø—Ä–∞–≤–∫–∞ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö")
    url = "https://discordapp.com/users/909464722267590657/"
    text = f'–í–æ—Ç –º–æ–π –¥–∏—Å–∫–æ—Ä–¥ –µ—Å–ª–∏ —á—Ç–æ: <a href="{url}">–ù–∞–∂–º–∏ –∑–¥–µ—Å—å</a>'
    bot.send_message(message.chat.id, text, parse_mode='HTML')

def get_question_markup(question):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(*question['options'])
    return markup

def get_result(score):
    max_score = max(score.values())
    best_matches = [key for key, value in score.items() if value == max_score]

    if len(best_matches) > 1:
        result = random.choice(best_matches)
    else:
        result = best_matches[0]

    return result


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if user_id in users_data and 'current_question' in users_data[user_id]:
        bot.send_message(user_id, '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–∞—à—É –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é.')
        send_question(user_id)
    else:
        bot.send_message(user_id,'üö®–û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –≠—Ç–æ—Ç —Ç–µ—Å—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å—É–±—ä–µ–∫—Ç–∏–≤–µ–Ω –∏ –æ—Å–Ω–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ—ë–º –ª–∏—á–Ω–æ–º –º–Ω–µ–Ω–∏–∏.')
        users_data[user_id] = {
            'current_question': 0,
            'score': {'–ë–ª—É–º': 0, '–°—Ç–µ–ª–ª–∞': 0, '–§–ª–æ—Ä–∞': 0, '–ú—É–∑–∞': 0, '–¢–µ–∫–Ω–∞': 0, '–õ–µ–π–ª–∞': 0, "–ú–∏—Å—Ç–µ—Ä –ó–∞–≥–∞–¥–∫–∞": 0}
        }
        save_user_data()
        send_question(user_id)

def send_question(user_id):
    user = users_data[user_id]
    question = questions[user['current_question']]
    markup = get_question_markup(question)
    bot.send_message(user_id, question['text'], reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id

    if user_id not in users_data:
        bot.send_message(user_id, '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start')
        return

    user = users_data[user_id]
    current_question_index = user['current_question']
    question = questions[current_question_index]

    if message.text not in question['options']:
        bot.send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
        return

    character = answers_to_character[current_question_index][message.text]
    user['score'][character] += 1
    user['score']["–ú–∏—Å—Ç–µ—Ä –ó–∞–≥–∞–¥–∫–∞"] = 0
    save_user_data()
    user['current_question'] += 1
    if user['current_question'] < len(questions):
        send_question(user_id)
    else:
        result = get_result(user['score'])
        bot.send_message(user_id, results[result]['text'])
        bot.send_message(user_id, results[result]['description'])
        bot.send_photo(user_id, results[result]['image'])
        bot.send_message(message.chat.id, 'üö®–ü–æ–≤—Ç–æ—Ä—è—é —ç—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–∏–∫–∞–∫ –Ω–µ –û—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æÃÅ–≤—ã–≤–∞–µ—Ç –≤–∞—Å —ç—Ç–æ –ª–∏—à—å –º–æ—ë —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –º–Ω–µ–Ω–∏–µ!', reply_markup=types.ReplyKeyboardRemove())
        del users_data[user_id]
save_user_data()

bot.polling()